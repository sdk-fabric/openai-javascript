/**
 * CompletionsTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {CompletionCollection} from "./CompletionCollection";
import {CompletionDeleted} from "./CompletionDeleted";
import {CompletionRequest} from "./CompletionRequest";
import {CompletionResponse} from "./CompletionResponse";

export class CompletionsTag extends TagAbstract {
    /**
     * Creates a model response for the given chat conversation.
     *
     * @returns {Promise<CompletionResponse>}
     * @throws {ClientException}
     */
    public async create(payload: CompletionRequest): Promise<CompletionResponse> {
        const url = this.parser.url('/v1/chat/completions', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CompletionResponse;
        }

        const statusCode = response.status;
        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * List stored Chat Completions. Only Chat Completions that have been stored with the store parameter set to true will be returned.
     *
     * @returns {Promise<CompletionCollection>}
     * @throws {ClientException}
     */
    public async getAll(after?: string, limit?: number, model?: string, order?: string): Promise<CompletionCollection> {
        const url = this.parser.url('/v1/chat/completions', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'after': after,
                'limit': limit,
                'model': model,
                'order': order,
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CompletionCollection;
        }

        const statusCode = response.status;
        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Delete a stored chat completion. Only Chat Completions that have been created with the store parameter set to true can be deleted.
     *
     * @returns {Promise<CompletionDeleted>}
     * @throws {ClientException}
     */
    public async delete(completionId: string): Promise<CompletionDeleted> {
        const url = this.parser.url('/v1/chat/completions/:completion_id', {
            'completion_id': completionId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as CompletionDeleted;
        }

        const statusCode = response.status;
        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
